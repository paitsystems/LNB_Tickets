package com.lnbinfotech.lnb_tickets;import android.animation.ValueAnimator;import android.app.ProgressDialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.net.Uri;import android.os.AsyncTask;import android.os.Bundle;import android.support.v4.content.LocalBroadcastManager;import android.support.v7.app.AlertDialog;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.text.TextUtils;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.AdapterView;import android.widget.AutoCompleteTextView;import android.widget.Button;import android.widget.ImageView;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.StringRequest;import com.android.volley.toolbox.Volley;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import com.google.android.gms.ads.AdRequest;import com.google.android.gms.ads.AdView;import com.google.firebase.crash.FirebaseCrash;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.messaging.FirebaseMessaging;import com.lnbinfotech.lnb_tickets.adapter.ShortDescListAdapter;import com.lnbinfotech.lnb_tickets.connectivity.ConnectivityTest;import com.lnbinfotech.lnb_tickets.constant.AppSingleton;import com.lnbinfotech.lnb_tickets.constant.Constant;import com.lnbinfotech.lnb_tickets.constant.NotificationUtils;import com.lnbinfotech.lnb_tickets.db.DBHandler;import com.lnbinfotech.lnb_tickets.interfaces.DatabaseUpgradeInterface;import com.lnbinfotech.lnb_tickets.interfaces.RetrofitApiInterface;import com.lnbinfotech.lnb_tickets.log.CopyLog;import com.lnbinfotech.lnb_tickets.log.WriteLog;import com.lnbinfotech.lnb_tickets.mail.GMailSender;import com.lnbinfotech.lnb_tickets.model.TicketDetailClass;import com.lnbinfotech.lnb_tickets.model.TicketMasterClass;import com.lnbinfotech.lnb_tickets.model.ViewReachToMDClass;import com.lnbinfotech.lnb_tickets.parse.ParseJSON;import com.lnbinfotech.lnb_tickets.post.Post;import com.lnbinfotech.lnb_tickets.services.DataUpdateService;import com.lnbinfotech.lnb_tickets.volleyrequests.RetrofitApiBuilder;import org.codehaus.jackson.JsonFactory;import org.codehaus.jackson.JsonParser;import org.codehaus.jackson.JsonToken;import org.json.JSONObject;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.net.URLEncoder;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Locale;import java.util.concurrent.atomic.AtomicInteger;import okhttp3.RequestBody;import retrofit2.Call;import retrofit2.Callback;// Created by lnb on 8/11/2016.public class MainActivity extends AppCompatActivity implements View.OnClickListener, DatabaseUpgradeInterface {    private TextView tv_total, tv_complete, tv_pending, tv_name, tv_landline, tv_mobile, tv_email;    private Button btn_view_all, btn_add;    private AutoCompleteTextView auto;    private ImageView img_add_new, img_view_all, accHeadImg;    private Constant constant;    private Toast toast;    private ListView listView;    public static int isUpdate = 0;    private DBHandler db;    private AdView mAdView;    private int isDiaShowed = 0;    private String version = "0", imgName;    private ArrayList<TicketMasterClass> updateList, addList;    private String writeFilename = "Write.txt";    private Menu menu;    private MenuItem myMenu;    private BroadcastReceiver mRegistrationBroadcastReceiver;    private FirebaseDatabase mFirebaseInstance;    private DatabaseReference mFirebaseDatabase;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        //getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE,WindowManager.LayoutParams.FLAG_SECURE);        setContentView(R.layout.activity_main);        Toolbar mToolbar = findViewById(R.id.toolbar);        setSupportActionBar(mToolbar);        init();        btn_add.setOnClickListener(this);        btn_view_all.setOnClickListener(this);        tv_landline.setOnClickListener(this);        tv_mobile.setOnClickListener(this);        accHeadImg.setOnClickListener(this);        mAdView = findViewById(R.id.adView);        AdRequest adRequest;        if (Constant.liveTestFlag == 1) {            adRequest = new AdRequest.Builder().build();        } else {            adRequest = new AdRequest.Builder()                    .addTestDevice(AdRequest.DEVICE_ID_EMULATOR)                    .addTestDevice(Constant.adMobID)                    .build();        }        mAdView.loadAd(adRequest);        try {            PackageInfo pInfo = this.getPackageManager().getPackageInfo(getPackageName(), 0);            version = pInfo.versionCode + "." + pInfo.versionName;            Constant.showLog("App Version " + version);        } catch (PackageManager.NameNotFoundException e) {            e.printStackTrace();            writeLog("MainActivity_" + e.getMessage());            FirebaseCrash.log(e.getMessage());        }        if (ConnectivityTest.getNetStat(getApplicationContext())) {            loadData();            //getCustomerMasterV6();        } else {            setData();            toast.setText("You Are Offline");            toast.show();        }        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {                TicketMasterClass pendingTicketClass = (TicketMasterClass) listView.getItemAtPosition(i);                Intent intent = new Intent(getApplicationContext(), UpdateTicketActivity.class);                intent.putExtra("data", pendingTicketClass);                startActivity(intent);                overridePendingTransition(R.anim.enter, R.anim.exit);            }        });        SharedPreferences pref = getApplicationContext().getSharedPreferences(FirstActivity.PREF_NAME, 0);        String regId = pref.getString("regId", "0");        Constant.showLog("Firebase reg id: " + regId);        int groupId = FirstActivity.pref.getInt(getString(R.string.pref_groupid), 0);        FirebaseMessaging.getInstance().subscribeToTopic(String.valueOf(groupId));        FirebaseMessaging.getInstance().setAutoInitEnabled(true);        mRegistrationBroadcastReceiver = new BroadcastReceiver() {            @Override            public void onReceive(Context context, Intent intent) {                // checking for type intent filter                if (intent.getAction().equals(Constant.REGISTRATION_COMPLETE)) {                    // gcm successfully registered                    // now subscribe to `global` topic to receive app wide notifications                    //FirebaseMessaging.getInstance().subscribeToTopic(Constant.TOPIC_GLOBAL);                    SharedPreferences pref = getApplicationContext().getSharedPreferences(FirstActivity.PREF_NAME, 0);                    String regId = pref.getString("regId", null);                    Constant.showLog("Firebase reg id: " + regId);                    if (!TextUtils.isEmpty(regId))                        Constant.showLog("Firebase Reg Id: " + regId);                    else                        Constant.showLog("Firebase Reg Id is not received yet!");                } else if (intent.getAction().equals(Constant.PUSH_NOTIFICATION)) {                    // new push notification is received                    String message = intent.getStringExtra("message");                    Toast.makeText(getApplicationContext(), "Push notification: " + message, Toast.LENGTH_LONG).show();                    Constant.showLog(message);                }            }        };        /*Cursor cursor = SQLiteDatabase.openOrCreateDatabase(":memory:", null).rawQuery("select sqlite_version() AS sqlite_version", null);        String sqliteVersion = "";        while(cursor.moveToNext()){            sqliteVersion += cursor.getString(0);        }        cursor.close();        Constant.showLog("SqliteVersion "+sqliteVersion);*/        //new Constant(getApplicationContext()).setRecurringAlarm();    }    @Override    protected void onResume() {        super.onResume();        LocalBroadcastManager.getInstance(this).registerReceiver(mRegistrationBroadcastReceiver,                new IntentFilter(Constant.REGISTRATION_COMPLETE));        // register new push message receiver        // by doing this, the activity will be notified each time a new message arrives        LocalBroadcastManager.getInstance(this).registerReceiver(mRegistrationBroadcastReceiver,                new IntentFilter(Constant.PUSH_NOTIFICATION));        // clear the notification area when the app is opened        NotificationUtils.clearNotifications(getApplicationContext());        FirstActivity.pref = getSharedPreferences(FirstActivity.PREF_NAME, MODE_PRIVATE);        if (isUpdate == 1) {            writeLog("MainActivity_onResume_loadData");            FirebaseCrash.log("MainActivity_onResume_loadData");            isUpdate = 0;            constant = new Constant(MainActivity.this);            isDiaShowed = 0;            loadData();        }        if (mAdView != null) {            mAdView.resume();        }    }    @Override    protected void onPause() {        LocalBroadcastManager.getInstance(this).unregisterReceiver(mRegistrationBroadcastReceiver);        if (mAdView != null) {            mAdView.pause();        }        isUpdate = 0;        super.onPause();    }    @Override    protected void onDestroy() {        if (mAdView != null) {            mAdView.destroy();        }        isUpdate = 0;        super.onDestroy();    }    @Override    public void onBackPressed() {        showDia(2);    }    @Override    public void onClick(View view) {        switch (view.getId()) {            case R.id.btn_add:                startActivity(new Intent(getApplicationContext(), AddNewTicketActivity.class));                //startActivity(new Intent(getApplicationContext(),AssetManagementActivity.class));                overridePendingTransition(R.anim.enter, R.anim.exit);                break;            case R.id.btn_view_all:                //startActivity(new Intent(getApplicationContext(),AllTicketListActivity.class));                startActivity(new Intent(getApplicationContext(), AllTicketTabPagerActivity.class));                overridePendingTransition(R.anim.enter, R.anim.exit);                break;            case R.id.img_add_new:                startActivity(new Intent(getApplicationContext(), AddNewTicketActivity.class));                //startActivity(new Intent(getApplicationContext(),AddAssetInfo.class));                overridePendingTransition(R.anim.enter, R.anim.exit);                break;            case R.id.img_view_all:                startActivity(new Intent(getApplicationContext(), AllTicketTabPagerActivity.class));                overridePendingTransition(R.anim.enter, R.anim.exit);                break;            case R.id.tv_landline:                String phone2 = tv_landline.getText().toString();                if (!phone2.equals("") && !phone2.equals("0")) {                    makeCall(phone2);                }                break;            case R.id.tv_mobile:                String phone1 = tv_mobile.getText().toString();                if (!phone1.equals("") && !phone1.equals("0")) {                    makeCall(phone1);                }                break;            case R.id.img:                showPic();                break;        }    }    @Override    public boolean onPrepareOptionsMenu(Menu menu) {        super.onPrepareOptionsMenu(menu);        if (myMenu != null) {            if (FirstActivity.pref.contains(getString(R.string.pref_prodused))) {                if (FirstActivity.pref.getString(getString(R.string.pref_prodused), "NA").equals("C")) {                    myMenu.setVisible(true);                } else {                    myMenu.setVisible(false);                }            } else {                myMenu.setVisible(false);            }        }        return true;    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        this.menu = menu;        getMenuInflater().inflate(R.menu.mainactivity_menu, menu);        this.myMenu = menu.findItem(R.id.release_notes);        if (FirstActivity.pref.contains(getString(R.string.pref_prodused))) {            if (FirstActivity.pref.getString(getString(R.string.pref_prodused), "NA").equals("C")) {                menu.findItem(R.id.release_notes).setVisible(true);            } else {                menu.findItem(R.id.release_notes).setVisible(false);            }        } else {            menu.findItem(R.id.release_notes).setVisible(false);        }        if (FirstActivity.pref.getString(getString(R.string.pref_emptype), "").equals("C")) {            if (!FirstActivity.pref.getString(getString(R.string.pref_isHWapplicable), "").equals("S")) {                menu.findItem(R.id.asset).setVisible(true);            } else {                menu.findItem(R.id.asset).setVisible(false);            }        } else {            menu.findItem(R.id.asset).setVisible(true);        }        return super.onCreateOptionsMenu(menu);    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        if (item.getItemId() == R.id.logout) {            showDia(0);        } else if (item.getItemId() == R.id.refresh) {            showDia(1);        } else if (item.getItemId() == R.id.clear_data) {            showDia(7);        } else if (item.getItemId() == R.id.report_error) {            showDia(6);        } else if (item.getItemId() == R.id.changePassword) {            startActivity(new Intent(getApplicationContext(), ChangePasswordActivity.class));            overridePendingTransition(R.anim.enter, R.anim.exit);        } else if (item.getItemId() == R.id.reach_to_md) {            String type = FirstActivity.pref.getString(getString(R.string.pref_emptype), "");            if (type.equals("E")) {                Intent intent = new Intent(getApplicationContext(), ViewReachToMDActivity.class);                intent.putExtra("type", "E");                startActivity(intent);            } else if (type.equals("C")) {                Intent intent = new Intent(getApplicationContext(), ReachToMDActivity.class);                intent.putExtra("type", "C");                intent.putExtra("data", new ViewReachToMDClass());                startActivity(intent);            }            overridePendingTransition(R.anim.enter, R.anim.exit);        } else if (item.getItemId() == R.id.release_notes) {            Intent intent = new Intent(getApplicationContext(), ReleaseNoteDetailActivity.class);            startActivity(intent);            overridePendingTransition(R.anim.enter, R.anim.exit);        } else if (item.getItemId() == R.id.asset) {            startActivity(new Intent(getApplicationContext(), AssetManagementActivity.class));            overridePendingTransition(R.anim.enter, R.anim.exit);        }        return super.onOptionsItemSelected(item);    }    @Override    public void dbUpgraded() {        Constant.showLog("dbUpgraded Called");        //db.deleteTabel(DBHandler.Ticket_Detail_Table);    }    private void init() {        auto = findViewById(R.id.auto);        tv_total = findViewById(R.id.tv_total);        tv_complete = findViewById(R.id.tv_complete);        tv_pending = findViewById(R.id.tv_pending);        btn_view_all = findViewById(R.id.btn_view_all);        btn_add = findViewById(R.id.btn_add);        img_view_all = findViewById(R.id.img_view_all);        img_add_new = findViewById(R.id.img_add_new);        img_view_all.setOnClickListener(this);        img_add_new.setOnClickListener(this);        listView = findViewById(R.id.listView);        toast = Toast.makeText(getApplicationContext(), "", Toast.LENGTH_LONG);        toast.setGravity(Gravity.CENTER, 0, 0);        constant = new Constant(MainActivity.this);        db = new DBHandler(getApplicationContext());        //db.initInterface(this);        updateList = new ArrayList<>();        tv_name = findViewById(R.id.tv_name);        tv_landline = findViewById(R.id.tv_landline);        tv_mobile = findViewById(R.id.tv_mobile);        tv_email = findViewById(R.id.tv_email);        accHeadImg = findViewById(R.id.img);        FirstActivity.pref = getSharedPreferences(FirstActivity.PREF_NAME, MODE_PRIVATE);        ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {            @Override            public void onAnimationUpdate(ValueAnimator animation) {                ((TextView) findViewById(R.id.text)).setAlpha((Float) animation.getAnimatedValue());            }        });        animator.setDuration(500);        animator.setRepeatMode(ValueAnimator.REVERSE);        animator.setRepeatCount(-1);        animator.start();    }    private void refreshUserData() {        constant = new Constant(MainActivity.this);        constant.showPD();        try {            String user = FirstActivity.pref.getString(getString(R.string.pref_username), "");            String pass = FirstActivity.pref.getString(getString(R.string.pref_password), "");            user = URLEncoder.encode(user, "UTF-8");            pass = URLEncoder.encode(pass, "UTF-8");            String url = Constant.ipaddress + "/getEmpValid?UserName=" + user + "&Password=" + pass;            writeLog("MainActivity_refreshUserData_" + url);            FirebaseCrash.log("MainActivity_refreshUserData_" + url);            Constant.showLog(url);            StringRequest request = new StringRequest(url,                    new Response.Listener<String>() {                        @Override                        public void onResponse(String result) {                            Constant.showLog(result);                            result = result.replace("\\", "");                            result = result.replace("''", "");                            result = result.substring(1, result.length() - 1);                            constant.showPD();                            if (new ParseJSON(result, getApplicationContext()).parseUserData() == 1) {                                //showDia(4);                                db.deleteTabel(DBHandler.Ticket_Master_Table);                                db.deleteTabel(DBHandler.Ticket_Detail_Table);                                db.deleteTabel(DBHandler.SMLMAST_Table);                                db.deleteTabel(DBHandler.SoftwareVersionDetail_Table);                                db.deleteTabel(DBHandler.Table_QuestBank);                                SharedPreferences.Editor editor = FirstActivity.pref.edit();                                editor.remove(getString(R.string.pref_acchead));                                editor.apply();                                isDiaShowed = 0;                                loadData();                                writeLog("MainActivity_refreshUserData_Success");                                FirebaseCrash.log("MainActivity_refreshUserData_Success");                            } else {                                writeLog("MainActivity_refreshUserData_UnSuccess");                                FirebaseCrash.log("MainActivity_refreshUserData_UnSuccess");                                showDia(5);                            }                        }                    },                    new Response.ErrorListener() {                        @Override                        public void onErrorResponse(VolleyError error) {                            writeLog("MainActivity_refreshUserData_volley_" + error.getMessage());                            FirebaseCrash.log("MainActivity_refreshUserData_volley_" + error.getMessage());                            error.printStackTrace();                            constant.showPD();                            showDia(5);                        }                    }            );            RequestQueue queue = Volley.newRequestQueue(getApplicationContext());            queue.add(request);        } catch (Exception e) {            writeLog("MainActivity_refreshUserData_" + e.getMessage());            FirebaseCrash.log("MainActivity_refreshUserData_" + e.getMessage());            e.printStackTrace();            toast.setText("Something Went Wrong");            toast.show();        }    }    private void loadData() {        constant = new Constant(MainActivity.this);        constant.showPD();        final AtomicInteger atomicInteger = new AtomicInteger(3);        String type = FirstActivity.pref.getString(getString(R.string.pref_emptype), "");        String isHWapplicable = FirstActivity.pref.getString(getString(R.string.pref_isHWapplicable), "");        int autoId = db.getMaxAutoId(type);        String moddate1 = db.getLatestModDate1();        String url1 = Constant.ipaddress + "/GetVersion";        String url2 = Constant.ipaddress + "/GetTicketMaster?clientAuto=" + FirstActivity.pref.getInt(getString(R.string.pref_auto), 0) +                "&type=" + type + "&autoId=" + autoId + "&isHWapplicable=" + isHWapplicable;        //new getTicketMaster(autoId,atomicInteger).execute(url2);        getTicketMasterV1();        String url3 = Constant.ipaddress + "/GetCustNameBranch?groupId=" + FirstActivity.pref.getInt(getString(R.string.pref_groupid), 0) +                "&auto=" + db.getSMLMASTMaxAuto();        String url4 = Constant.ipaddress + "/GetUpdatedTicketMaster?clientAuto=" + FirstActivity.pref.getInt(getString(R.string.pref_auto), 0) +                "&type=" + type + "&autoId=" + autoId + "&isHWapplicable=" + isHWapplicable + "&moddate=" + moddate1;        Constant.showLog(url1);        Constant.showLog(url2);        Constant.showLog(url3);        Constant.showLog(url4);        StringRequest versionRequest = new StringRequest(url1,                new Response.Listener<String>() {                    @Override                    public void onResponse(String result) {                        Constant.showLog(result);                        result = result.replace("\\", "");                        result = result.replace("''", "");                        result = result.substring(1, result.length() - 1);                        String _data = new ParseJSON(result).parseVersion();                        int taskLeft = atomicInteger.decrementAndGet();                        Constant.showLog("versionRequest_" + taskLeft);                        if (taskLeft == 0) {                            constant.showPD();                            //setData();                        }                        if (_data != null && !_data.equals("0")) {                            /*if (version.equals(_data)) {                                SharedPreferences.Editor editor = FirstActivity.pref.edit();                                editor.putString(getString(R.string.pref_version), _data);                                editor.apply();                            }else{                                showDia(8);                            }*/                            String versionArr[] = version.split("\\.");                            String dataArr[] = _data.split("\\.");                            int currVersion = Integer.parseInt(versionArr[0]);                            int dataVersion = Integer.parseInt(dataArr[0]);                            if (currVersion > dataVersion) {                                SharedPreferences.Editor editor = FirstActivity.pref.edit();                                editor.putString(getString(R.string.pref_version), _data);                                editor.apply();                            } else if (currVersion < dataVersion) {                                showDia(8);                            }                        } else if (_data == null) {                            if (isDiaShowed != 1) {                                showDia(3);                                isDiaShowed = 1;                            }                        }                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error) {                        writeLog("MainActivity_loadData_versionRequest_" + error.getMessage());                        FirebaseCrash.log("MainActivity_loadData_versionRequest_" + error.getMessage());                        int taskLeft = atomicInteger.decrementAndGet();                        Constant.showLog("versionRequest_ErrorListener_" + taskLeft);                        if (taskLeft == 0) {                            constant.showPD();                        }                        if (isDiaShowed != 1) {                            showDia(3);                            isDiaShowed = 1;                        }                    }                }        );        StringRequest descRequest = new StringRequest(url2,                new Response.Listener<String>() {                    @Override                    public void onResponse(String result) {                        Constant.showLog(result);                        result = result.replace("\\", "");                        result = result.replace("''", "");                        result = result.substring(1, result.length() - 1);                        addList = new ParseJSON(result, getApplicationContext()).parseAllTicket();                        int taskLeft = atomicInteger.decrementAndGet();                        Constant.showLog("descRequest_" + taskLeft);                        if (taskLeft == 0) {                            constant.showPD();                            //setData();                        }                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error) {                        writeLog("MainActivity_loadData_descRequest_" + error.getMessage());                        FirebaseCrash.log("MainActivity_loadData_descRequest_" + error.getMessage());                        error.printStackTrace();                        int taskLeft = atomicInteger.decrementAndGet();                        Constant.showLog("descRequest_ErrorListener_" + taskLeft);                        if (taskLeft == 0) {                            constant.showPD();                        }                        if (isDiaShowed != 1) {                            showDia(3);                            isDiaShowed = 1;                        }                    }                }        );        StringRequest custRequest = new StringRequest(url3,                new Response.Listener<String>() {                    @Override                    public void onResponse(String result) {                        Constant.showLog(result);                        result = result.replace("\\", "");                        result = result.replace("''", "");                        result = result.substring(1, result.length() - 1);                        new ParseJSON(result, getApplicationContext()).parseSMLMASTData();                        int taskLeft = atomicInteger.decrementAndGet();                        Constant.showLog("custRequest_" + taskLeft);                        if (taskLeft == 0) {                            constant.showPD();                            //setData();                        }                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error) {                        writeLog("MainActivity_loadData_custRequest_" + error.getMessage());                        FirebaseCrash.log("MainActivity_loadData_custRequest_" + error.getMessage());                        error.printStackTrace();                        int taskLeft = atomicInteger.decrementAndGet();                        Constant.showLog("custRequest_ErrorListener_" + taskLeft);                        if (taskLeft == 0) {                            constant.showPD();                        }                        if (isDiaShowed != 1) {                            showDia(3);                            isDiaShowed = 1;                        }                    }                }        );        StringRequest updateRequest = new StringRequest(url4,                new Response.Listener<String>() {                    @Override                    public void onResponse(String result) {                        Constant.showLog(result);                        result = result.replace("\\", "");                        result = result.replace("''", "");                        result = result.substring(1, result.length() - 1);                        updateList = new ParseJSON(result, getApplicationContext()).parseUpdatedTicket();                        int taskLeft = atomicInteger.decrementAndGet();                        Constant.showLog("updateRequest_" + taskLeft);                        if (taskLeft == 0) {                            constant.showPD();                            // setData();                        }                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error) {                        writeLog("MainActivity_loadData_updateRequest_" + error.getMessage());                        FirebaseCrash.log("MainActivity_loadData_updateRequest_" + error.getMessage());                        error.printStackTrace();                        int taskLeft = atomicInteger.decrementAndGet();                        Constant.showLog("updateRequest_ErrorListener_" + taskLeft);                        if (taskLeft == 0) {                            constant.showPD();                        }                        if (isDiaShowed != 1) {                            showDia(3);                            isDiaShowed = 1;                        }                    }                }        );        AppSingleton.getInstance(getApplicationContext()).addToRequestQueue(versionRequest, "ABC");        //AppSingleton.getInstance(getApplicationContext()).addToRequestQueue(descRequest,"ABC");        AppSingleton.getInstance(getApplicationContext()).addToRequestQueue(custRequest, "ABC");        AppSingleton.getInstance(getApplicationContext()).addToRequestQueue(updateRequest, "ABC");        /*RequestQueue queue = Volley.newRequestQueue(getApplicationContext());        queue.add(versionRequest);        queue.add(descRequest);        queue.add(custRequest);        queue.add(updateRequest);*/    }    private void getTicketMasterV1() {        final ProgressDialog pd = new ProgressDialog(MainActivity.this);        pd.setMessage("Please Wait...");        pd.setCancelable(false);        pd.show();        try {            String type = FirstActivity.pref.getString(getString(R.string.pref_emptype), "");            String isHWapplicable = FirstActivity.pref.getString(getString(R.string.pref_isHWapplicable), "");            int autoId = db.getMaxAutoId(type);            final DBHandler db = new DBHandler(getApplicationContext());            String url = FirstActivity.pref.getInt(getString(R.string.pref_auto), 0) + "|" + autoId + "|" + type + "|" + isHWapplicable;            writeLog("getTicketMasterV1" + url);            final JSONObject jsonBody = new JSONObject();            jsonBody.put("details", url);            RequestBody body = RequestBody.create(okhttp3.MediaType.                    parse("application/json; charset=utf-8"), (jsonBody).toString());            Constant.showLog(jsonBody.toString());            Call<List<TicketMasterClass>> call = new RetrofitApiBuilder().getApiBuilder().                    create(RetrofitApiInterface.class).                    getTicketMasterV1(body);            call.enqueue(new Callback<List<TicketMasterClass>>() {                @Override                public void onResponse(Call<List<TicketMasterClass>> call, retrofit2.Response<List<TicketMasterClass>> response) {                    Constant.showLog("onResponse");                    List<TicketMasterClass> list = response.body();                    if (list != null) {                        if (list.size() != 0) {                            Constant.showLog(list.size() + "");                            //db.deleteTabel(DBHandler.Ticket_Master_Table);                            db.addTicketMaster(list);                        }                        writeLog("getTicketMasterV1onResponse_" + list.size());                    } else {                        Constant.showLog("onResponse_list_null");                        writeLog("getTicketMasterV1onResponse_list_null");                    }                    pd.dismiss();                    getTicketDetailsV1();                }                @Override                public void onFailure(Call<List<TicketMasterClass>> call, Throwable t) {                    Constant.showLog("onFailure");                    if (!call.isCanceled()) {                        call.cancel();                    }                    t.printStackTrace();                    writeLog("getTicketMasterV1onFailure_" + t.getMessage());                    pd.dismiss();                    showDia(3);                }            });        } catch (Exception e) {            e.printStackTrace();            writeLog("getTicketMasterV1" + e.getMessage());            pd.dismiss();            showDia(3);        }    }    private void getTicketDetailsV1() {        final ProgressDialog pd = new ProgressDialog(MainActivity.this);        pd.setMessage("Please Wait...");        pd.setCancelable(false);        pd.show();        try {            final DBHandler db = new DBHandler(getApplicationContext());            String type = FirstActivity.pref.getString(getString(R.string.pref_emptype), "");            int clientAuto = FirstActivity.pref.getInt(getString(R.string.pref_auto), 0);            int auto = db.getAutoTD();            String url = clientAuto + "|" + auto + "|" + type;            writeLog("getTicketDetailsV1" + url);            final JSONObject jsonBody = new JSONObject();            jsonBody.put("details", url);            RequestBody body = RequestBody.create(okhttp3.MediaType.                    parse("application/json; charset=utf-8"), (jsonBody).toString());            Constant.showLog(jsonBody.toString());            Call<List<TicketDetailClass>> call = new RetrofitApiBuilder().getApiBuilder().                    create(RetrofitApiInterface.class).                    getTicketDetailsV1(body);            call.enqueue(new Callback<List<TicketDetailClass>>() {                @Override                public void onResponse(Call<List<TicketDetailClass>> call, retrofit2.Response<List<TicketDetailClass>> response) {                    Constant.showLog("onResponse");                    List<TicketDetailClass> list = response.body();                    if (list != null) {                        if (list.size() != 0) {                            //db.deleteTabel(DBHandler.Ticket_Detail_Table);                            db.addTicketDetail(list);                        }                        writeLog("getTicketDetailsV1onResponse_" + list.size());                    } else {                        Constant.showLog("onResponse_list_null");                        writeLog("getTicketDetailsV1onResponse_list_null");                    }                    pd.dismiss();                    checkProdUsed();                    //loadData();                }                @Override                public void onFailure(Call<List<TicketDetailClass>> call, Throwable t) {                    Constant.showLog("onFailure");                    if (!call.isCanceled()) {                        call.cancel();                    }                    t.printStackTrace();                    writeLog("getTicketDetailsV1onFailure_" + t.getMessage());                    pd.dismiss();                    showDia(3);                }            });        } catch (Exception e) {            e.printStackTrace();            writeLog("getTicketDetailsV1" + e.getMessage());            pd.dismiss();            showDia(3);        }    }    private void setData() {        /*if(addList.size()!=0){            for(TicketMasterClass mast : addList) {                db.addTicketMaster(mast);            }        }*/        if (updateList.size() != 0) {            for (TicketMasterClass mast : updateList) {                db.updateTicketMaster(mast);            }        }        String crby = FirstActivity.pref.getString(getString(R.string.pref_ClientName), "");        String type = FirstActivity.pref.getString(getString(R.string.pref_emptype), "");        ArrayList<TicketMasterClass> pendingTicketClassList = db.getTicketMaster(3, crby, type);        if (pendingTicketClassList != null) {            if (pendingTicketClassList.size() != 0) {                listView.setAdapter(null);                listView.setAdapter(new ShortDescListAdapter(pendingTicketClassList, getApplicationContext()));            }        }        String _data = db.getCount();        String[] data = _data.split("\\^");        tv_total.setText(data[0]);        tv_complete.setText(data[1]);        tv_pending.setText(data[2]);        int total = Integer.parseInt(data[0]);        SharedPreferences.Editor editor = FirstActivity.pref.edit();        editor.putInt(getString(R.string.pref_ticketTotal), total);        editor.apply();        if (FirstActivity.pref.contains(getString(R.string.pref_acchead))) {            String accHead = FirstActivity.pref.getString(getString(R.string.pref_acchead), "");            String[] det = accHead.split("\\^");            tv_name.setText(det[1]);            tv_landline.setText(det[2]);            tv_mobile.setText(det[3]);            tv_email.setText(det[5]);            imgName = det[4];            Constant.showLog(Constant.imgIpaddress + det[4]);            Glide.with(getApplicationContext()).load(Constant.imgIpaddress + det[4])                    .thumbnail(1f)                    .crossFade()                    .placeholder(R.drawable.ic_male)                    .diskCacheStrategy(DiskCacheStrategy.ALL)                    .fitCenter()                    .override(100, 100)                    .into(accHeadImg);        }        //Intent i= new Intent(getApplicationContext(), DataUpdateService.class);        //startService(i);    }    private void showDia(int i) {        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);        builder.setCancelable(false);        if (i == 0) {            builder.setMessage("Do You Want To Logout App?");            builder.setPositiveButton("Ok", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialogInterface, int i) {                    SharedPreferences.Editor editor = FirstActivity.pref.edit();                    editor.putBoolean(getResources().getString(R.string.pref_logged), false);                    editor.apply();                    dialogInterface.dismiss();                    Constant.deleteLogFile();                    new Constant(MainActivity.this).doFinish();                }            });            builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialogInterface, int i) {                    dialogInterface.dismiss();                }            });        } else if (i == 1) {            builder.setMessage("Do You Want To Refresh Data?");            builder.setPositiveButton("Ok", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialogInterface, int i) {                    if (ConnectivityTest.getNetStat(getApplicationContext())) {                        refreshUserData();                    } else {                        toast.setText("You Are Offline");                        toast.show();                    }                    dialogInterface.dismiss();                }            });            builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialogInterface, int i) {                    dialogInterface.dismiss();                }            });        } else if (i == 2) {            builder.setMessage("Do You Want To Exit App?");            builder.setPositiveButton("Ok", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialogInterface, int i) {                    Constant.deleteLogFile();                    new Constant(MainActivity.this).doFinish();                    dialogInterface.dismiss();                }            });            builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialogInterface, int i) {                    dialogInterface.dismiss();                }            });        } else if (i == 3) {            builder.setMessage("Error While Loading Data");            builder.setPositiveButton("Try Again", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    isDiaShowed = 0;                    loadData();                    dialog.dismiss();                }            });            builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    dialog.dismiss();                }            });        } else if (i == 4) {            builder.setMessage("Data Updated Successfully");            builder.setPositiveButton("Ok", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    dialog.dismiss();                }            });        } else if (i == 5) {            builder.setMessage("Error While Updating Data");            builder.setPositiveButton("Try Again", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    if (ConnectivityTest.getNetStat(getApplicationContext())) {                        refreshUserData();                    } else {                        toast.setText("You Are Offline");                        toast.show();                    }                    dialog.dismiss();                }            });            builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    dialog.dismiss();                }            });        } else if (i == 6) {            builder.setMessage("Do You Want To Report An Issue?");            builder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    if (ConnectivityTest.getNetStat(getApplicationContext())) {                        exportfile();                    } else {                        toast.setText("You Are Offline");                        toast.show();                    }                    dialog.dismiss();                }            });            builder.setNegativeButton("No", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    dialog.dismiss();                }            });        } else if (i == 7) {            builder.setMessage("Do You Want To Clear Data?");            builder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    db.deleteTabel(DBHandler.Ticket_Master_Table);                    db.deleteTabel(DBHandler.Ticket_Detail_Table);                    db.deleteTabel(DBHandler.SMLMAST_Table);                    db.deleteTabel(DBHandler.SoftwareVersionDetail_Table);                    FirstActivity.pref.edit().clear().apply();                    finish();                    startActivity(new Intent(getApplicationContext(), LoginActivity.class));                    overridePendingTransition(R.anim.left_to_right, R.anim.right_to_left);                    dialog.dismiss();                }            });            builder.setNegativeButton("No", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    dialog.dismiss();                }            });        } else if (i == 8) {            builder.setTitle("Update App");            builder.setMessage("Smart Ticket New Version Is Available");            builder.setPositiveButton("Update", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    //FirstActivity.pref.edit().clear().commit();                    //db.deleteTabel(DBHandler.Ticket_Master_Table);                    //db.deleteTabel(DBHandler.SMLMAST_Table);                    new Constant(MainActivity.this).doFinish();                    final String appPackageName = getPackageName(); // getPackageName() from Context or Activity object                    try {                        startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + appPackageName)));                    } catch (android.content.ActivityNotFoundException anfe) {                        startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("http://play.google.com/store/apps/details?id=" + appPackageName)));                    }                    dialog.dismiss();                }            });            /*builder.setNegativeButton("Later", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    dialog.dismiss();                }            });*/        } else if (i == 9) {            builder.setTitle("Smart Ticket");            builder.setMessage("Please Give Us Your Feedback");            builder.setPositiveButton("Now", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    dialog.dismiss();                    startActivity(new Intent(getApplicationContext(), FeedbackActivity.class));                    overridePendingTransition(R.anim.enter, R.anim.exit);                }            });            builder.setNegativeButton("Later", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    dialog.dismiss();                }            });        }        builder.create().show();    }    private void showPic() {        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);        builder.setCancelable(true);        LayoutInflater inflater = getLayoutInflater();        View view = inflater.inflate(R.layout.pic_dialog, null);        ImageView _img = (ImageView) view.findViewById(R.id.dia_img);        Glide.with(getApplicationContext()).load(Constant.imgIpaddress + imgName)                .thumbnail(1f)                .crossFade()                .placeholder(R.drawable.ic_male)                .diskCacheStrategy(DiskCacheStrategy.ALL)                .fitCenter()                .into(_img);        builder.setView(view);        builder.create().show();    }    private void makeCall(String number) {        Intent phoneIntent = new Intent(Intent.ACTION_DIAL, Uri.fromParts(                "tel", number, null));        startActivity(phoneIntent);        overridePendingTransition(R.anim.enter, R.anim.exit);    }    private void exportfile() {        if (new CopyLog().copyLog(getApplicationContext())) {            writeLog("MainActivity_exportfile_Log_File_Exported");            sendMail1();        } else {            writeLog("MainActivity_exportfile_Error_While_Log_File_Exporting");        }    }    private void sendMail1() {        try {            File sdFile = Constant.checkFolder(Constant.folder_name);            File writeFile = new File(sdFile, Constant.log_file_name);            GMailSender sender = new GMailSender(Constant.automailID, Constant.autoamilPass);            Constant.showLog("Attached Log File :- " + writeFile.getAbsolutePath());            sender.addAttachment(sdFile.getAbsolutePath() + File.separator + Constant.log_file_name, Constant.log_file_name, Constant.mail_body);            String resp[] = {Constant.mailReceipient};            AtomicInteger workCounter = new AtomicInteger(resp.length);            for (String aResp : resp) {                if (!aResp.equals("")) {                    Constant.showLog("send Mail Recp :- " + aResp);                    new sendMail(workCounter, aResp, sender).execute("");                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    private class sendMail extends AsyncTask<String, Void, String> {        private final AtomicInteger workCounter;        ProgressDialog pd;        String respMailId;        GMailSender sender;        sendMail(AtomicInteger workCounter, String _respMailId, GMailSender _sender) {            respMailId = _respMailId;            sender = _sender;            this.workCounter = workCounter;        }        @Override        protected void onPreExecute() {            super.onPreExecute();            pd = new ProgressDialog(MainActivity.this);            pd.setCancelable(false);            pd.setMessage("Please Wait...");            pd.show();        }        @Override        protected String doInBackground(String... strings) {            try {                String res = respMailId;                String nickname = FirstActivity.pref.getString(getString(R.string.pref_nickname), "");                nickname = Constant.mail_subject + "-" + nickname;                sender.sendMail(nickname, Constant.mail_body, Constant.automailID, res);                return "1";            } catch (Exception e) {                writeLog("MainActivity_sendMailClass_" + e.getMessage());                FirebaseCrash.log("MainActivity_sendMailClass_" + e.getMessage());                e.printStackTrace();                return "0";            }        }        @Override        protected void onPostExecute(String result) {            super.onPostExecute(result);            try {                int tasksLeft = this.workCounter.decrementAndGet();                Constant.showLog("sendMail Work Counter " + tasksLeft);                if (result.equals("1")) {                    if (tasksLeft == 0) {                        writeLog("MainActivity_sendMailClass_Mail_Send_Successfully");                        FirebaseCrash.log("MainActivity_sendMailClass_Mail_Send_Successfully");                        Constant.showLog("sendMail END MULTI THREAD");                        Constant.showLog("sendMail Work Counter END " + tasksLeft);                        toast.setText("File Exported Successfully");                    } else {                        writeLog("MainActivity_sendMailClass_Mail_Send_UnSuccessfull1");                        FirebaseCrash.log("MainActivity_sendMailClass_Mail_Send_UnSuccessfull1");                        toast.setText("Error While Sending Mail");                    }                } else {                    toast.setText("Error While Exporting Log File");                    writeLog("MainActivity_sendMailClass_Mail_Send_UnSuccessfull");                    FirebaseCrash.log("MainActivity_sendMailClass_Mail_Send_UnSuccessfull");                }                toast.show();                pd.dismiss();            } catch (Exception e) {                writeLog("MainActivity_sendMailClass_" + e.getMessage());                FirebaseCrash.log("MainActivity_sendMailClass_" + e.getMessage());                e.printStackTrace();                pd.dismiss();            }        }    }    private void writeLog(String _data) {        new WriteLog().writeLog(getApplicationContext(), _data);    }    private class getTicketMaster extends AsyncTask<String, Void, String> {        private int to;        private AtomicInteger atomicInteger;        private ProgressDialog pd;        @Override        protected void onPreExecute() {            super.onPreExecute();            pd = new ProgressDialog(MainActivity.this);            pd.setMessage("Please Wait");            pd.setCancelable(false);            pd.show();        }        private getTicketMaster(int _to, AtomicInteger _atomicInteger) {            this.to = _to;            this.atomicInteger = _atomicInteger;        }        @Override        protected String doInBackground(String... strings) {            return Post.POST(strings[0]);        }        @Override        protected void onPostExecute(String response) {            super.onPostExecute(response);            pd.dismiss();            if (response != null) {                response = response.substring(1, response.length() - 1);                response = response.replace("\\\\r\\\\n", "");                new readJSON(response, "SizeNDesign", to, atomicInteger).execute();            } else {                setData();            }        }    }    private class readJSON extends AsyncTask<Void, Void, String> {        private int to;        private String result, parseType;        private AtomicInteger atomicInteger;        private File writeFile = null;        private ProgressDialog pd;        @Override        protected void onPreExecute() {            super.onPreExecute();            pd = new ProgressDialog(MainActivity.this);            pd.setMessage("Please Wait");            pd.setCancelable(false);            pd.show();        }        private readJSON(String _result, String _parseType, int _to, AtomicInteger _atomicInteger) {            this.result = _result;            this.parseType = _parseType;            this.to = _to;            this.atomicInteger = _atomicInteger;        }        @Override        protected String doInBackground(Void... voids) {            String retValue = "B";            File sdFile = Constant.checkFolder(Constant.folder_name);            FileWriter writer;            try {                String search = "\\\\", replace = "";                writeFile = new File(sdFile, writeFilename);                writer = new FileWriter(writeFile);                int size = result.length();                if (size > 2) {                    Log.d("Log", "Replacing");                    int b = 50000;                    for (int i = 0; i < size; i++) {                        if (b >= size) {                            b = size;                        }                        String q = result.substring(i, b);                        String g = q.replaceAll(search, replace);                        System.gc();                        writer.append(g);                        i = b - 1;                        b = b + 50000;                    }                    retValue = "A";                }                writer.flush();                writer.close();                return retValue;            } catch (IOException | OutOfMemoryError e) {                /*int taskLeft = atomicInteger.decrementAndGet();                Constant.showLog("descRequest_replace_"+taskLeft);                if (taskLeft == 0) {                    constant.showPD();                }*/                if (writeFile != null) {                    writeFile.delete();                }                pd.dismiss();                try {                    writer = new FileWriter(new File(sdFile, "Log.txt"));                    writer.append(e.getMessage());                    writer.flush();                    writer.close();                } catch (Exception e1) {                    e.printStackTrace();                }                e.printStackTrace();                return null;            }        }        @Override        protected void onPostExecute(String s) {            super.onPostExecute(s);            pd.dismiss();            if (s.equals("A")) {                new writeDB(parseType, to, atomicInteger).execute();            } else if (s.equals("B")) {                /*int taskLeft = atomicInteger.decrementAndGet();                Constant.showLog("descRequest_replace_"+taskLeft);                if (taskLeft == 0) {                    constant.showPD();                    setData();                }*/                //setData();                String type = FirstActivity.pref.getString(getString(R.string.pref_emptype), "");                int clientAuto = FirstActivity.pref.getInt(getString(R.string.pref_auto), 0);                int auto = db.getAutoTD();                String url1 = Constant.ipaddress + "/GetAllTicketDetail?clientAuto=" + clientAuto + "&auto=" + auto + "&type=" + type;                Constant.showLog(url1);                new getTicketDetail(0, new AtomicInteger(1)).execute(url1);            } else {                showDia(3);            }        }    }    private class writeDB extends AsyncTask<Void, String, String> {        private File writeFile;        private String parseType;        private int to;        private AtomicInteger atomicInteger;        private ProgressDialog pd;        @Override        protected void onPreExecute() {            super.onPreExecute();            pd = new ProgressDialog(MainActivity.this);            pd.setMessage("Please Wait");            pd.setCancelable(false);            pd.show();        }        private writeDB(String _parseType, int _to, AtomicInteger _atomicInteger) {            this.parseType = _parseType;            this.to = _to;            this.atomicInteger = _atomicInteger;        }        @Override        protected String doInBackground(Void... voids) {            File sdFile = Constant.checkFolder(Constant.folder_name);            JsonFactory f = new JsonFactory();            try {                writeFile = new File(sdFile, writeFilename);                JsonParser jp = f.createJsonParser(writeFile);                parseSizeNDesign(jp, to);                return "";            } catch (Exception e) {                /*int taskLeft = atomicInteger.decrementAndGet();                Constant.showLog("descRequest_"+taskLeft);                if (taskLeft == 0) {                    constant.showPD();                }*/                pd.dismiss();                try {                    FileWriter writer = new FileWriter(new File(sdFile, "Log.txt"));                    writer.append(e.getMessage());                    writer.flush();                    writer.close();                } catch (Exception e1) {                    e.printStackTrace();                    return null;                }                e.printStackTrace();                return null;            }        }        @Override        protected void onPostExecute(String s) {            super.onPostExecute(s);            pd.dismiss();            if (s != null) {                if (s.equals("")) {                    Constant.showLog("Success");                    /*int taskLeft = atomicInteger.decrementAndGet();                    Constant.showLog("descRequest_"+taskLeft);                    if (taskLeft == 0) {                        constant.showPD();                        String type = FirstActivity.pref.getString(getString(R.string.pref_emptype),"");                        int clientAuto = FirstActivity.pref.getInt(getString(R.string.pref_auto),0);                        int auto = db.getAutoTD();                        String url1 = Constant.ipaddress + "/GetTicketDetail?clientAuto="+clientAuto+"&auto="+auto+"&type="+type;                        Constant.showLog(url1);                        new getTicketDetail(0,new AtomicInteger(1)).execute(url1);                        //setData();                    }*/                    String type = FirstActivity.pref.getString(getString(R.string.pref_emptype), "");                    int clientAuto = FirstActivity.pref.getInt(getString(R.string.pref_auto), 0);                    int auto = db.getAutoTD();                    String url1 = Constant.ipaddress + "/GetAllTicketDetail?clientAuto=" + clientAuto + "&auto=" + auto + "&type=" + type;                    Constant.showLog(url1);                    new getTicketDetail(0, new AtomicInteger(1)).execute(url1);                    //setData();                } else {                    showDia(3);                }            } else {                /*int taskLeft = atomicInteger.decrementAndGet();                Constant.showLog("descRequest_"+taskLeft);                if (taskLeft == 0) {                    constant.showPD();                }*/                showDia(3);            }        }    }    private void parseSizeNDesign(JsonParser jp, int to) {        try {            int count = 0;            List<TicketMasterClass> list = new ArrayList<>();            while (jp.nextToken() != JsonToken.END_ARRAY) {                count++;                TicketMasterClass ticketClass = new TicketMasterClass();                String moddate = "null";                while (jp.nextToken() != JsonToken.END_OBJECT) {                    String token = jp.getCurrentName();                    if ("auto".equals(token)) {                        jp.nextToken();                        ticketClass.setAuto(jp.getValueAsInt());                    } else if ("id".equals(token)) {                        jp.nextToken();                        ticketClass.setId(jp.getValueAsInt());                    } else if ("ClientAuto".equals(token)) {                        jp.nextToken();                        ticketClass.setClientAuto(jp.getValueAsInt());                    } else if ("ClientName".equals(token)) {                        jp.nextToken();                        ticketClass.setClientName(jp.getText());                    } else if ("finyr".equals(token)) {                        jp.nextToken();                        ticketClass.setFinyr(jp.getText());                    } else if ("ticketNo".equals(token)) {                        jp.nextToken();                        ticketClass.setTicketNo(jp.getText());                    } else if ("Particular".equals(token)) {                        jp.nextToken();                        ticketClass.setParticular(jp.getText());                    } else if ("Subject".equals(token)) {                        jp.nextToken();                        ticketClass.setSubject(jp.getText());                    } else if ("ImagePAth".equals(token)) {                        jp.nextToken();                        ticketClass.setImagePAth(jp.getText());                    } else if ("Status".equals(token)) {                        jp.nextToken();                        ticketClass.setStatus(jp.getText());                    } else if ("CrBy".equals(token)) {                        jp.nextToken();                        ticketClass.setCrBy(jp.getText());                    } else if ("CrDate".equals(token)) {                        jp.nextToken();                        ticketClass.setCrDate(jp.getText());                    } else if ("CrTime".equals(token)) {                        jp.nextToken();                        ticketClass.setCrTime(jp.getText());                    } else if ("ModBy".equals(token)) {                        jp.nextToken();                        ticketClass.setModBy(jp.getText());                    } else if ("ModDate".equals(token)) {                        jp.nextToken();                        moddate = jp.getText();                        ticketClass.setModDate(moddate);                    } else if ("ModTime".equals(token)) {                        jp.nextToken();                        ticketClass.setModTime(jp.getText());                    } else if ("AssignTo".equals(token)) {                        jp.nextToken();                        ticketClass.setAssignTO(jp.getText());                    } else if ("AssignDate".equals(token)) {                        jp.nextToken();                        ticketClass.setAssignTODate(jp.getText());                    } else if ("AssignTime".equals(token)) {                        jp.nextToken();                        ticketClass.setAssignTOTime(jp.getText());                    } else if ("Assignby".equals(token)) {                        jp.nextToken();                        ticketClass.setAssignBy(jp.getText());                    } else if ("AssignbyDate".equals(token)) {                        jp.nextToken();                        ticketClass.setAssignByDate(jp.getText());                    } else if ("AssignbyTime".equals(token)) {                        jp.nextToken();                        ticketClass.setAssignByTime(jp.getText());                    } else if ("type".equals(token)) {                        jp.nextToken();                        ticketClass.setType(jp.getText());                    } else if ("GenType".equals(token)) {                        jp.nextToken();                        ticketClass.setGenType(jp.getText());                    } else if ("Branch".equals(token)) {                        jp.nextToken();                        ticketClass.setBranch(jp.getText());                    } else if ("PointType".equals(token)) {                        jp.nextToken();                        ticketClass.setPointtype(jp.getText());                        String moddate1 = "null";                        if (!moddate.equals("null")) {                            Date d = new SimpleDateFormat("dd/MMM/yyyy", Locale.ENGLISH).parse(moddate);                            moddate1 = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH).format(d);                        }                        ticketClass.setModdate1(moddate1);                    }                }                list.add(ticketClass);            }            db.addTicketMaster(list);            Constant.showLog("" + count);        } catch (Exception e) {            writeLog("parseTicketMaster_" + e.getMessage());            e.printStackTrace();            showDia(3);        }    }    private class getTicketDetail extends AsyncTask<String, Void, String> {        private int to;        private AtomicInteger atomicInteger;        private ProgressDialog pd;        @Override        protected void onPreExecute() {            super.onPreExecute();            pd = new ProgressDialog(MainActivity.this);            pd.setMessage("Please Wait");            pd.setCancelable(false);            pd.show();        }        private getTicketDetail(int _to, AtomicInteger _atomicInteger) {            this.to = _to;            this.atomicInteger = _atomicInteger;        }        @Override        protected String doInBackground(String... strings) {            return Post.POST(strings[0]);        }        @Override        protected void onPostExecute(String response) {            super.onPostExecute(response);            pd.dismiss();            if (response != null) {                response = response.substring(1, response.length() - 1);                response = response.replace("\\\\r\\\\n", "");                new readJSONTD(response, "SizeNDesign", to, atomicInteger).execute();            } else {                checkProdUsed();            }        }    }    private class readJSONTD extends AsyncTask<Void, Void, String> {        private int to;        private String result, parseType;        private AtomicInteger atomicInteger;        private ProgressDialog pd;        @Override        protected void onPreExecute() {            super.onPreExecute();            pd = new ProgressDialog(MainActivity.this);            pd.setMessage("Please Wait");            pd.setCancelable(false);            pd.show();        }        private readJSONTD(String _result, String _parseType, int _to, AtomicInteger _atomicInteger) {            this.result = _result;            this.parseType = _parseType;            this.to = _to;            this.atomicInteger = _atomicInteger;        }        @Override        protected String doInBackground(Void... voids) {            String retValue = "B";            File sdFile = Constant.checkFolder(Constant.folder_name);            FileWriter writer;            File writeFile = null;            try {                String search = "\\\\", replace = "";                writeFile = new File(sdFile, writeFilename);                writer = new FileWriter(writeFile);                int size = result.length();                if (size > 2) {                    Log.d("Log", "Replacing");                    int b = 50000;                    for (int i = 0; i < size; i++) {                        if (b >= size) {                            b = size;                        }                        String q = result.substring(i, b);                        String g = q.replaceAll(search, replace);                        System.gc();                        writer.append(g);                        i = b - 1;                        b = b + 50000;                    }                    retValue = "A";                }                writer.flush();                writer.close();                return retValue;            } catch (IOException | OutOfMemoryError e) {                if (writeFile != null) {                    writeFile.delete();                }                pd.dismiss();                try {                    writer = new FileWriter(new File(sdFile, "Log.txt"));                    writer.append(e.getMessage());                    writer.flush();                    writer.close();                } catch (Exception e1) {                    e.printStackTrace();                }                e.printStackTrace();                return null;            }        }        @Override        protected void onPostExecute(String s) {            super.onPostExecute(s);            pd.dismiss();            if (s.equals("A")) {                new writeDBTD(parseType, to, atomicInteger).execute();            } else if (s.equals("B")) {                checkProdUsed();            } else {                showDia(3);            }        }    }    private class writeDBTD extends AsyncTask<Void, String, String> {        private File writeFile;        private String parseType;        private int to;        private AtomicInteger atomicInteger;        private ProgressDialog pd;        @Override        protected void onPreExecute() {            super.onPreExecute();            pd = new ProgressDialog(MainActivity.this);            pd.setMessage("Please Wait");            pd.setCancelable(false);            pd.show();        }        private writeDBTD(String _parseType, int _to, AtomicInteger _atomicInteger) {            this.parseType = _parseType;            this.to = _to;            this.atomicInteger = _atomicInteger;        }        @Override        protected String doInBackground(Void... voids) {            File sdFile = Constant.checkFolder(Constant.folder_name);            JsonFactory f = new JsonFactory();            try {                writeFile = new File(sdFile, writeFilename);                JsonParser jp = f.createJsonParser(writeFile);                parseTicketDetail(jp, to);                return "";            } catch (Exception e) {                pd.dismiss();                try {                    FileWriter writer = new FileWriter(new File(sdFile, "Log.txt"));                    writer.append(e.getMessage());                    writer.flush();                    writer.close();                } catch (Exception e1) {                    e.printStackTrace();                    return null;                }                e.printStackTrace();                return null;            }        }        @Override        protected void onPostExecute(String s) {            super.onPostExecute(s);            pd.dismiss();            if (s != null) {                if (s.equals("")) {                    Constant.showLog("Success");                    ///getFeedBackRequired();                    checkProdUsed();                } else {                    showDia(3);                }            } else {                showDia(3);            }        }    }    private void parseTicketDetail(JsonParser jp, int to) {        try {            int count = 0;            List<TicketDetailClass> list = new ArrayList<>();            while (jp.nextToken() != JsonToken.END_ARRAY) {                count++;                TicketDetailClass ticketClass = new TicketDetailClass();                while (jp.nextToken() != JsonToken.END_OBJECT) {                    String token = jp.getCurrentName();                    if ("Auto".equals(token)) {                        jp.nextToken();                        ticketClass.setAuto(jp.getValueAsInt());                    } else if ("MastAuto".equals(token)) {                        jp.nextToken();                        ticketClass.setMastAuto(jp.getValueAsInt());                    } else if ("Description".equals(token)) {                        jp.nextToken();                        ticketClass.setDesc(jp.getText());                    } else if ("CrBy".equals(token)) {                        jp.nextToken();                        ticketClass.setCrby(jp.getText());                    } else if ("CrDate".equals(token)) {                        jp.nextToken();                        String crdate1 = jp.getText();                        ticketClass.setCrDate(crdate1);                        Date d = new SimpleDateFormat("dd/MMM/yyyy", Locale.ENGLISH).parse(crdate1);                        String crdate2 = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH).format(d);                        ticketClass.setCrDate1(crdate2);                    } else if ("CrTime".equals(token)) {                        jp.nextToken();                        ticketClass.setCrTime(jp.getText());                    } else if ("Type".equals(token)) {                        jp.nextToken();                        ticketClass.setType(jp.getText());                    } else if ("GenType".equals(token)) {                        jp.nextToken();                        ticketClass.setGenType(jp.getText());                    } else if ("Id".equals(token)) {                        jp.nextToken();                        ticketClass.setId(jp.getValueAsInt());                    } else if ("ClientAuto".equals(token)) {                        jp.nextToken();                        ticketClass.setClientAuto(jp.getValueAsInt());                    } else if ("PointType".equals(token)) {                        jp.nextToken();                        ticketClass.setPointType(jp.getText());                    }                }                list.add(ticketClass);            }            db.addTicketDetail(list);            Constant.showLog("" + count);        } catch (Exception e) {            writeLog("parseTicketDetail_" + e.getMessage());            e.printStackTrace();            showDia(3);        }    }    private void checkProdUsed() {        if (FirstActivity.pref.contains(getString(R.string.pref_prodused))) {            getFeedBackRequired();            //setData();        } else {            if (FirstActivity.pref.contains(getString(R.string.pref_emptype))) {                String type = FirstActivity.pref.getString(getString(R.string.pref_emptype), "");                if (type.equals("C")) {                    getProdUsed();                } else {                    SharedPreferences.Editor editor = FirstActivity.pref.edit();                    editor.putString(getString(R.string.pref_prodused), "C");                    editor.apply();                    if (menu != null) {                        onPrepareOptionsMenu(menu);                    }                    setData();                }            }        }    }    private void getProdUsed() {        constant.showPD();        int auto = FirstActivity.pref.getInt(getString(R.string.pref_auto), 0);        String url = Constant.ipaddress + "/GetProdUsed?auto=" + auto;        Constant.showLog(url);        StringRequest prodUsedRequest = new StringRequest(url,                new Response.Listener<String>() {                    @Override                    public void onResponse(String result) {                        Constant.showLog(result);                        result = result.replace("\\", "");                        result = result.replace("''", "");                        result = result.replace("\\\\r\\\\n", "");                        result = result.substring(1, result.length() - 1);                        String prodUsed = new ParseJSON(result, getApplicationContext()).parseProdUsed();                        constant.showPD();                        if (prodUsed.equals("C")) {                            SharedPreferences.Editor editor = FirstActivity.pref.edit();                            editor.putString(getString(R.string.pref_prodused), prodUsed);                            editor.apply();                            if (menu != null) {                                onPrepareOptionsMenu(menu);                            }                        }                        getFeedBackRequired();                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error) {                        writeLog("MainActivity_loadData_descRequest_" + error.getMessage());                        error.printStackTrace();                        constant.showPD();                        getFeedBackRequired();                    }                }        );        AppSingleton.getInstance(getApplicationContext()).addToRequestQueue(prodUsedRequest, "ABC");    }    private void getFeedBackRequired() {        constant.showPD();        int auto = FirstActivity.pref.getInt(getString(R.string.pref_auto), 0);        String url = Constant.ipaddress + "/isFeedBackRequired?clientAuto=" + auto;        Constant.showLog(url);        StringRequest prodUsedRequest = new StringRequest(url,                new Response.Listener<String>() {                    @Override                    public void onResponse(String result) {                        Constant.showLog(result);                        result = result.replace("\\", "");                        result = result.replace("''", "");                        result = result.replace("\\\\r\\\\n", "");                        result = result.substring(1, result.length() - 1);                        String isFeedReq = new ParseJSON(result, getApplicationContext()).isFeedBackRequired();                        constant.showPD();                        SharedPreferences.Editor editor = FirstActivity.pref.edit();                        editor.putString(getString(R.string.pref_isFeedReq), isFeedReq);                        editor.apply();                        isFeedBackRequired();                        if (!FirstActivity.pref.contains(getString(R.string.pref_acchead))) {                            getAccHead();                        } else {                            setData();                        }                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error) {                        writeLog("MainActivity_getFeedBackRequired_" + error.getMessage());                        error.printStackTrace();                        constant.showPD();                        if (!FirstActivity.pref.contains(getString(R.string.pref_acchead))) {                            getAccHead();                        } else {                            setData();                        }                    }                }        );        AppSingleton.getInstance(getApplicationContext()).addToRequestQueue(prodUsedRequest, "ABC");    }    private void isFeedBackRequired() {        if (FirstActivity.pref.contains(getString(R.string.pref_isFeedReq))) {            String type = FirstActivity.pref.getString(getString(R.string.pref_isFeedReq), "");            if (type.equals("Y")) {                showDia(9);            }        }    }    private void getAccHead() {        constant.showPD();        int auto = FirstActivity.pref.getInt(getString(R.string.pref_auto), 0);        String type = FirstActivity.pref.getString(getString(R.string.pref_emptype), "");        String url = Constant.ipaddress + "/GetAccHead?auto=" + auto + "&type=" + type;        Constant.showLog(url);        StringRequest accHeadRequest = new StringRequest(url,                new Response.Listener<String>() {                    @Override                    public void onResponse(String result) {                        Constant.showLog(result);                        result = result.replace("\\", "");                        result = result.replace("''", "");                        result = result.replace("\\\\r\\\\n", "");                        result = result.substring(1, result.length() - 1);                        String accHead = new ParseJSON(result, getApplicationContext()).getAccHead();                        constant.showPD();                        SharedPreferences.Editor editor = FirstActivity.pref.edit();                        editor.putString(getString(R.string.pref_acchead), accHead);                        editor.apply();                        setData();                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error) {                        writeLog("MainActivity_getFeedBackRequired_" + error.getMessage());                        error.printStackTrace();                        constant.showPD();                        setData();                    }                }        );        AppSingleton.getInstance(getApplicationContext()).addToRequestQueue(accHeadRequest, "ABC");    }}